<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Not console necessary" xml:space="preserve">
    <value>It's not necessary to use this program with console commands, you can execute it by double-clicking on the executable file and you'll receive help to use it as an usual program. However, if you want to use it as console command, here's the necessary info:</value>
  </data>
  <data name="Program name" xml:space="preserve">
    <value>Super QOI converter</value>
    <comment>@Invariant</comment>
  </data>
  <data name="Welcome to" xml:space="preserve">
    <value>Welcome to</value>
  </data>
  <data name="Specify console version" xml:space="preserve">
    <value>(console version)</value>
  </data>
  <data name="Commands title" xml:space="preserve">
    <value>Command: "Super QOI converter" [Paths to files or folders] [Options]</value>
    
  </data>
  <data name="You must add paths" xml:space="preserve">
    <value>You must add path files to use these options!</value>
  </data>
  <data name="Copy attributes and dates option" xml:space="preserve">
    <value>-c
	Copy attributes and dates from original files</value>
  </data>
  <data name="Delete source option" xml:space="preserve">
    <value>-d
	Delete original files when finishing</value>
  </data>
  <data name="Help option" xml:space="preserve">
    <value>-h, --help
	Shows help</value>
  </data>
  <data name="Ignore colors option" xml:space="preserve">
    <value>-i
	Ignore console colors</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="More info how to execute" xml:space="preserve">
    <value>to get more info about how to execute this program by console parameters</value>
  </data>
  <data name="Invalid option or path" xml:space="preserve">
    <value>Sorry, that is an invalid option or an invalid path (you must use absolute paths)</value>
  </data>
  <data name="Not copy attributes and dates option" xml:space="preserve">
    <value>-nc
	Won't copy attributes and dates from original files and will skip the confirmation message</value>
  </data>
  <data name="Not delete source option" xml:space="preserve">
    <value>-nd
	Won't delete original files and will skip the confirmation message</value>
  </data>
  <data name="Here are some examples" xml:space="preserve">
    <value>Here are some examples:</value>
  </data>
  <data name="Examples" xml:space="preserve">
    <value>"Super QOI converter" C:\Absolute\path\to\your\image.png
"Super QOI converter" F:\Several\paths.jpg C:\At\the\same\time.bmp
"Super QOI converter" C:\With\options.tif -c -d</value>
  </data>
  <data name="Contradictory options error" xml:space="preserve">
    <value>The program received contradictory options (-c and -nc or -d and -nd at the same time). Delete one of those options and try again</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="Yes to all" xml:space="preserve">
    <value>Yes to all</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="No to all" xml:space="preserve">
    <value>No to all</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="Reading invalid path message" xml:space="preserve">
    <value>It isn't a valid path, skipping...</value>
  </data>
  <data name="You did not add any path" xml:space="preserve">
    <value>It looks like you didn't write any path, so the program will read them now</value>
  </data>
  <data name="Write your paths now" xml:space="preserve">
    <value>Write your absolute paths now, one per line. Write "Exit" to continue:</value>
    <comment>The "Exit" word must be the same as Exit string</comment>
  </data>
  <data name="Add at least one path" xml:space="preserve">
    <value>Add at least one path</value>
  </data>
  <data name="Already entered" xml:space="preserve">
    <value>This path has already been entered, skipping...</value>
  </data>
  <data name="Repo official link message" xml:space="preserve">
    <value>Repository official link</value>
  </data>
  <data name="Made by" xml:space="preserve">
    <value>made by</value>
  </data>
  <data name="Use arrows or numbers and Enter" xml:space="preserve">
    <value>Use arrows or numbers to select option and press Enter</value>
  </data>
  <data name="Overwrite option" xml:space="preserve">
    <value>-o
	Overwrite files if they already exist</value>
  </data>
  <data name="Do not overwrite option" xml:space="preserve">
    <value>-no
	Won't overwrite files and skip confirmation</value>
  </data>
  <data name="File already exists" xml:space="preserve">
    <value>File already exists. Overwrite?</value>
  </data>
  <data name="Do you want to copy file info" xml:space="preserve">
    <value>Do you want to copy attributes and dates (creation and modification date) from the original file?</value>
  </data>
  <data name="This is going to delete permanently" xml:space="preserve">
    <value>WARNING: This is going to delete the file PERMANENTLY. Won't move it to trash bin</value>
  </data>
  <data name="Do you want to delete original file" xml:space="preserve">
    <value>Do you want to delete the original file?</value>
  </data>
  <data name="Thank you" xml:space="preserve">
    <value>Thank you for use Super QOI converter!</value>
  </data>
  <data name="It looks like a directory" xml:space="preserve">
    <value>It looks like {0} is a directory. Do you want to read each image from it?</value>
  </data>
  <data name="Not image or folder" xml:space="preserve">
    <value>This isn't a folder, image or it's not supported, skipping...</value>
  </data>
  <data name="Under a MIT license" xml:space="preserve">
    <value>under a MIT license</value>
  </data>
  <data name="Version option" xml:space="preserve">
    <value>-v, --version
	Shows the version of the program</value>
  </data>
  <data name="With help of" xml:space="preserve">
    <value>With help of:</value>
  </data>
</root>